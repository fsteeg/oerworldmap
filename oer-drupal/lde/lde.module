<?php

require_once __DIR__ . '/../lib/LibRDF/LibRDF/LibRDF.php';
require_once __DIR__ . '/../lib/php-json-ld/jsonld.php';

define('LDE_ENTITY_TYPE', 'lde');

/**
 * Implements hook_entity_info().
 *
 * This is the fundamental description of a linked data entity.
 *
 */
function lde_entity_info() {
  $entity_info = array();
  $entity_info[LDE_ENTITY_TYPE] = array(
    'label' => t('Linked Data Entity'),
    'entity class' => 'LinkedDataEntity',
    'controller class' => 'LinkedDataController',
    'base table' => null,
    'fieldable' => true,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'uri',
      'bundle' => 'type',
      'label' => 'uri',
    ),
    'form callback' => 'lde_form_callback',
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
  );
  return $entity_info;
}

/**
 * Implement hook_menu()
 *
 */
function lde_menu() {
  $items = array();
  $items['admin/config/lde'] = array(
    'title' => 'Linked Data Entities',
    'description' => 'Settings for the Linked Data Entities module',
    'position' => 'left',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/lde/storage'] = array(
    'title' => 'Linked Data Storage',
    'description' => 'API Authentification',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lde_configuration_form'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implements hook_entity_property_info().
 *
 */
function lde_entity_property_info() {
  $property_info = array();
  $property_info[LDE_ENTITY_TYPE]['properties'] = array(
    'id' => array(
      'label' => t('Linked Data Resource internal id'),
      'type' => 'integer',
    ),
    'type' => array(
      'label' => t('Linked Data Resource bundle type'),
      'type' => 'text',
    ),
    'uri' => array(
      'label' => t('Linked Data Resource URI'),
      'type' => 'text',
    ),
  );
  return $property_info;
}

/**
 * Callback for entity form
 */
function lde_form_callback($entity, $entity_type) {
  return drupal_get_form('lde_form', $entity, $entity_type);
}

/**
 * Provides an edit form for linked data entity
 *
 * @return array Structured array of form to be rendered
 */
function lde_form($form, &$form_state, $entity, $entity_type) {
  if (!isset($form['#entity'])) {
    $form['#entity'] = $entity;
    field_attach_form($entity_type, $entity, $form, $form_state);
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#default_value' => 'Submit',
    '#weight' => '1000',
  );
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#submit' => array('lde_form_submit_delete'),
    '#weight' => 2000,
  );
  return $form;
}

/**
 * Handles submissions of linked data entity forms
 *
 */
function lde_form_submit($form, &$form_state) {
  $entity = $form['#entity'];
  field_attach_submit($entity->entityType(), $entity, $form, $form_state);
  if (!isset($entity->uri) || $entity->uri == 'new') {
    $entity->uri = lde_resource_uri($entity);
  }
  $form_state['redirect'] = $entity->uri();
  $inline_entities = array();
  if (array_key_exists('inline', $form_state['values']['ldf_field_widget'])) {
    foreach ($form_state['values']['ldf_field_widget']['inline'] as $inline) {
      $inline_entities[$inline['uri']] = entity_create(LDE_ENTITY_TYPE, $inline);
    }
  }
  $entity->setEntityCache($inline_entities);
  if (!entity_save($entity->entityType(), $entity)) {
    drupal_set_message(
      'A problem occured trying to save your entry', 'error'
    );
    $form_state['rebuild'] = true;
  }
}

function lde_form_submit_delete($form , &$form_state) {
  $entity = $form['#entity'];
  lde_delete($entity);
  drupal_set_message(t('Resource %id has been deleted',
    array('%id' => $entity->identifier()))
  );
  $form_state['redirect'] = '/oerworldmap';
}

/**
* Load a linked data entity
*/
function lde_load($entity_uri, $reset = false) {
  $entities = lde_load_multiple(array($entity_uri), array(), $reset);
  return $entities ? reset($entities) : false;
}

/**
* Load multiple linked data entities based on certain conditions.
*/
function lde_load_multiple($entity_uris = array(), $conditions = array(), $reset = FALSE) {
  $entities = entity_load(LDE_ENTITY_TYPE, $entity_uris, $conditions, $reset);
  return $entities;
}

/**
* Save a linked data entity.
*/
function lde_save($entity) {
  entity_save(LDE_ENTITY_TYPE, $entity);
}

/**
* Delete single linked data entity.
*/
function lde_delete($entity) {
  entity_delete(LDE_ENTITY_TYPE, entity_id(LDE_ENTITY_TYPE, $entity));
}

/**
* Delete multiple linked data entities.
*/
function lde_delete_multiple($entity_uris) {
  entity_delete_multiple(LDE_ENTITY_TYPE, $entity_uris);
}

/**
* Create UUID v4
*/
function lde_uuid_v4() {
  return sprintf('%04x%04x-%04x-%04x-%04x-%04x%04x%04x',
    mt_rand(0, 0xffff), mt_rand(0, 0xffff),
    mt_rand(0, 0xffff),
    mt_rand(0, 0x0fff) | 0x4000,
    mt_rand(0, 0x3fff) | 0x8000,
    mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0xffff)
  );
}

function lde_resource_uri($entity = null) {
  $top_level_bundles = ApplicationProfile::get(LDE_ENTITY_TYPE)->getTopBundles();
  if (isset($entity) && isset($entity->type)
      && in_array($entity->type, $top_level_bundles))
  {
    $uri = "http://lobid.org/oer/" . lde_uuid_v4() . '#!';
  } else {
    $uri = "urn:uuid:" . lde_uuid_v4();
  }
  return $uri;
}

/**
* Create and display the configuration settings form.
*/
function lde_configuration_form($form, &$form_state) {

  // Text field for api host.
  $form['lde_api_host'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get(
      'lde_api_host',
      'api.localhost'
    ),
    '#title' => t('API host'),
    '#description' => t('The hostname or IP address of the API, without leading http://'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );

  // Text field for api user.
  $form['lde_api_user'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get(
      'lde_api_user',
      'admin'
    ),
    '#title' => t('API user'),
    '#description' => t('The username to authorize with.'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );

  // Password field for api password.
  $form['lde_api_password'] = array(
    '#type' => 'password',
    '#default_value' => variable_get(
      'lde_api_password',
      'admin'
    ),
    '#title' => t('API password'),
    '#description' => t('The password to authorize with.'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Constructs a new entity based on the provided RDF.
 *
 * @param  Entity    $entity The entity to load data into
 * @param  resource  $rdf_string The RDF-serialized entity
 * @param  string    $format     Optional, defaults to 'rdfxml'.
 * @return LinkedDataEntity $entity
 */
function lde_from_rdf($entity, $rdf_string, $format = 'rdfxml') {

  /**
   * Prevent endless loops
   */
  static $processed = array();
  $processed[] = $entity->identifier();

  $RDF = new LibRDF_NS('http://www.w3.org/1999/02/22-rdf-syntax-ns#');

  $rdf_subject = new LibRDF_URINode($entity->identifier());
  $rdf_model = new LibRDF_Model(new LibRDF_Storage());
  $rdf_parser = new LibRDF_Parser($format);
  $rdf_model->loadStatementsFromString($rdf_parser, $rdf_string);

  // Find bundle and corresponding mapping based on rdf:type
  $resource_type = false;
  $bundles = field_info_bundles(LDE_ENTITY_TYPE);
  foreach ($bundles as $bundle_name => $bundle) {
    $rdf_mapping = $bundle['rdf_mapping'];
    $rdf_types = $rdf_mapping['rdftype'];
    foreach ($rdf_types as $rdf_type) {
      $rdf_class = new LibRDF_URINode($rdf_type);
      $rdf_type_stmt = $rdf_model->findStatements(
        $rdf_subject, $RDF->type, $rdf_class
      );
      if ($rdf_type_stmt->current()) {
        $resource_type = $bundle_name;
        break 2;
      }
    }
  }

  // RDF could not be mapped to a bundle
  if (!$resource_type) return false;

  $entity->type = $resource_type;
  unset($rdf_mapping['rdftype']);

  // Add field data
  $embedded_entities = array();
  $wrapper = entity_metadata_wrapper($entity->entityType(), $entity);
  foreach ($rdf_mapping as $field_name => $field_mapping) {
    $field_info_instance = field_info_instance(
      $entity->entityType(), $field_name, $entity->bundle()
    );
    foreach ($field_mapping['predicates'] as $predicate) {
      $rdf_predicate = new LibRDF_URINode($predicate);
      $is_rel = (isset($field_mapping['type']) && $field_mapping['type'] == 'rel');
      foreach ($rdf_model->getTargets($rdf_subject, $rdf_predicate) as $value) {
        if ($value instanceof LibRDF_LiteralNode) {
          // Fix escaped unicode characters such as \u00E4
          $raw_value = json_decode('"'.$value->getValue().'"');
        } else {
          $raw_value = $value->getValue();
        }
        if ($wrapper->{$field_name} instanceOf EntityValueWrapper) {
          $wrapper->{$field_name} = $raw_value;
        } else {
          $wrapper->{$field_name}[] = $raw_value;
        }
        if ($is_rel && isset($field_info_instance['settings']['handler_settings']['target_bundles'])) {
          foreach ($field_info_instance['settings']['handler_settings']['target_bundles'] as $bundle_name => $bundle) {
            $rdf_mapping = rdf_mapping_load(LDE_ENTITY_TYPE, $bundle_name);
            foreach ($rdf_mapping['rdftype'] as $rdf_type) {
              //FIXME: How can such a statement exist for a literal
              //value? Bug in LibRDF?
              $rdf_type_stmt = new LibRDF_Statement($value, $RDF->type, new LibRDF_URINode($rdf_type));
              if ($rdf_model->hasStatement($rdf_type_stmt) && ($value instanceof LibRDF_URINode)) {
                $embedded_entity = entity_create(LDE_ENTITY_TYPE,
                  array('uri' => $value->getValue())
                );
                if (!in_array($embedded_entity->identifier(), $processed)) {
                  if (lde_from_rdf($embedded_entity, $rdf_string, $format)) {
                  $embedded_entities[$value->getValue()] = $embedded_entity;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  $entity->setEntityCache($embedded_entities);
  return true;
}

function lde_http_request($request_url, $http_options) {

  $http_response = drupal_http_request($request_url, $http_options);

  // FIXME: drupal_http_request does not follow 303s
  if ((303 == $http_response->code) || (307 == $http_response->code)) {
    $redirect_url = $http_response->headers['location'];
    // Fix for relative redirect URLs
    if ("/" == substr($redirect_url, 0, 1)) {
      $parsed_url = parse_url($request_url);
      $redirect_url = "{$parsed_url['scheme']}://{$parsed_url['host']}$redirect_url";
    }
    $request_url = $redirect_url;
    $http_response = drupal_http_request($request_url, $http_options);
  }

  return $http_response;

}
